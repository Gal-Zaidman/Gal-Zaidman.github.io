[{"categories":["Ansible","Full course"],"contents":"When we use ansible we often need to manage remote hosts, those hosts can be bare-metals, VMs, instances running on different clouds and so on. Before we start writing playbooks and tasks (will be covered later) we need to understand what we infrastructure we have and how should we manage it, this will have an affect on how our playbooks will be structured. In this blog post we will talk about the ansible inventory, which is a file that lists the hosts we manage and see cover some configurations that are relevant to the way we talk to our hosts.\nAnsible Inventory The ansible inventory is mostly a list of hosts that we want to manage with ansible. It allows us to easily group a number of hosts under the same name, and define variables for each host/group.\nIn ansible there are 2 types of inventories:\n static: a regular file that can be written in INI or YAML format. This is the most common and simple inventory and will be the main focus of this blog. dynamic: an executable script that returns a generated static inventory that reflects the current state of the infrastructure. This is a more advanced type of inventory which will be covered briefly.  Inventory Structure The simplest inventory is just a file listing the hosts. For example this is a simple inventory that lists 5 hosts with their FQDN:\nhost1.example.gzaidman.com # dev host host2.example.gzaidman.com # test host3.example.gzaidman.com # test host4.example.gzaidman.com # prod host5.example.gzaidman.com # prod ** We could also use plain IP addresses, but as a best practice it is recommended pto use FQDN or or IP addresses with aliases.\nThe above could be shortened with ranges:\nhost1.example.gzaidman.com # dev host host[2:3].example.gzaidman.com # test host[4:5].example.gzaidman.com # prod When we run an ansible playbook with the above inventory, ansible will try to perform each task in the playbook on all the hosts in the inventory.\nHaving a simple inventory with 5 hosts is not elegant but is manageable, but what if we have 50? 100? 1000?? as our infrastructure grows bigger and the system becomes more complex it is clear that we need a better way to organize our hosts, that\u0026rsquo;s where inventory groups come into play.\nAnsible inventory groups are used to assign a label to a collection of hosts. For example, we can use groups in the above example:\n[dev] host1.example.gzaidman.com [test] host[2:3].example.gzaidman.com [prod] host[4:5].example.gzaidman.com Groups a single host can be members of multiple groups and a group can contain child groups with the :children syntax. Let\u0026rsquo;s say we want to also group the hosts by their location:\n[dev] host1.example.gzaidman.com [test] host[2:3].example.gzaidman.com [prod] host[4:5].example.gzaidman.com [england] host1.example.gzaidman.com host3.example.gzaidman.com [finland] host2.example.gzaidman.com host4.example.gzaidman.com [us] host5.example.gzaidman.com [europe:children] england finland In ansible there are two default groups that are always created:\n all: contains every host in the inventory. ungrouped: contains all hosts that don’t have another group aside from all.  To verify that the inventory is ok, we can use:\n# ansible HOST/GROUP --list-hosts ansible canada --list-hosts Adding variables to managed hosts Very often we will want to define variables that are specific to a host or a group of hosts.\nWe can add the variables directly on each host\n[test] host1.example.gzaidman.com listen_port=4321 host2.example.gzaidman.com listen_port=8642 We can also add variables for a group:\n[test:vars] ntp_server=ntp.canada.example.com ntp_port=4567 proxy=proxy.canada.example.com Those variables are called host and group variables and they will be available in the playbook on the host. Host and group variables are very common but defining them directly on the inventory file can make it very verbose and hard to read especially when we have a large inventory file. Ansible lets us organize host and group variables on separate files which will make our inventory cleaner and our project more maintainable. We need to create host_vars and group_vars directories, those directories can contain a file with the name of the host/group where we will define all the variables. For example we can take the inventory above, and create:\n[gzaidman:example] tree . ├── group_vars │ └── test ├── host_vars │ ├── host1.example.gzaidman.com │ └── host2.example.gzaidman.com └── inventory The variable files should be in yaml syntax only which is a bit different from the above.\n[gzaidman:example]cattestntp_server:ntp.canada.example.comntp_port:4567proxy:proxy.canada.example.com[gzaidman:example]cathost1.example.gzaidman.comlisten_port:4321[gzaidman:example]cathost2.example.gzaidman.comlisten_port:8642You can also create directories named after your groups or hosts and place variable files in them. Ansible will read all the files in these directories in lexicographical order. An example with the \u0026lsquo;test\u0026rsquo; group:\n./example/group_vars/test/ntp_settings ./example/group_vars/test/proxy_settings\nThis can be very useful to keep your variables organized when a single file gets too big, or when you want to use Ansible Vault (covered later) on some group variables.\nInventory Location: The inventory can be in the following locations (ordered by precedence):\n parameter: ansible/ansible-playbook \u0026ndash;inventory PATHNAME or -i PATHNAME. Ansible configuration: with the inventory=INVENTORY_PATH. default location: /etc/ansible/host system\u0026rsquo;s default static inventory file.  Configurations There are a lot of flags we can set to control the way ansible connects to our hosts. We define does as inventory variables for a specific host/group. For the full list of configurations visit the Docs.\nSome of the most common ones are:\n ansible_connection: The why ansible will try to connect to the host. Bt default ansible executes playbooks over SSH with a connection type called smart, but there are other connection types:  SSH Based: paramiko, ssh Non-SSH based: local, docker   ansible_host: The name of the host to connect to, if different from the alias you wish to give to it. ansible_port: The connection port number, if not the default (22 for ssh).  Examples To see examples on different inventories go to the docs on:\nhttps://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#inventory-setup-examples\nDynamic Inventory When working with numerous machines or in an environment where machines come and go very quickly, it can be hard to keep the static inventory files up-to-date. Ansible supports dynamic inventory scripts that retrieve current information from external sources, allowing the inventory to be created in real time based on the current env. These scripts collect information from an external source and create JSON format inventory files.\nIf the inventory file is executable, then it is treated as a dynamic inventory program and Ansible attempts to run it to generate the inventory. If the file is not executable, then it is treated as a static inventory.\nIf a dynamic inventory script does not exist for the infrastructure in use, you can write a custom dynamic inventory program. This is a link to the ansible doc for writing a dynamic inventory link. A few things we should keep in mind:\n Can be written in any programming language, but must have an appropriate interpreter line (for example, #!/usr/bin/python). The script should return inventory information in JSON format. When passed the \u0026ndash;list option, the script must print a JSON-encoded hash/dictionary of all the hosts and groups in the inventory. When passed the \u0026ndash;host HOST option, the script must print a JSON hash/dictionary consisting of variables that are associated with that host, or an empty JSON hash/dictionary.  Configuring Ansible On each ansible project it is recommended to create a configuration file to override the default configurations based on the project requirements. Ansible configuration file is located at /etc/ansible/ansible.cfg, to override some settings we need to create a project configuration file at the project root directory with the same name ansible.cfg. The stock configuration should be sufficient for most project, and you can examine the /etc/ansible/ansible.cfg file to see the default configuration you can override.\nThe Ansible configuration file consists of several sections, each section is enclosed with \u0026lsquo;[SECTION_NAME]\u0026rsquo;.\nWe will talk about two sections that relate to the way ansible connects to hosts.\nSome configurations which relate to host management (they can als be overridden at the playbook level):\n[defaults]\nThis is the first section in the file and it sets defaults for Ansible operation.\n inventory - Specifies the path to the inventory file. remote_user - specify a different remote user, by default it will try to log in with the user which ran the ansible command via SSH. ask_pass - Whether or not to prompt for an SSH password. Can be false if using SSH public key authentication.  [privilege_escalation]\nConfigures how Ansible performs privilege escalation on managed hosts\n become - Whether to automatically switch user on the managed host after connecting. This can also be specified by a play. become_method - How to switch user (default is sudo). become_user - The user to switch to on the managed host (default is root). become_ask_pass - Whether to prompt for a password for your become_method. Defaults to false.  We can see all the configuration options with the ansible-config list command.\n** It\u0026rsquo;s important to understand that the above options on the default section refer to the initial connections meaning how to connect to the host and the options on the privilege_escalation refer to what to do once you are connected.\nConfiguration File Precedence  ANSIBLE_CONFIG environment variable ./ansible.cfg ~/ansible.cfg /etc/ansible/ansible.cfg  The recommended practice is to create an ansible.cfg file in a directory from which you run Ansible commands (meaning option 2). We cab check which configuration file is being used with ansible \u0026ndash;version.\n","permalink":"https://gal-zaidman.github.io/blog/ansible/2.-managing-hosts-with-ansible/","tags":["Ansible","FullCourse","GettingStarted"],"title":"Managing Hosts With Ansible"},{"categories":["Ansible","Full course"],"contents":"What is Ansible Ansible is an open source automation platform which is being developed by Redhat, it has a very large community of developers from simple users to huge organization. Ansible is an \u0026ldquo;infrastructure as Code\u0026rdquo; language, that means you can define and describe the state you want your infrastructure to be in with simple text file that can be managed and shared on a version control system.Ansible is a simple yaml based automation language that aims to make infrastructure management much more simple and maintainable. No more maintaining huge shell scripts that were written by some guy 2 years ago and now everyone is afraid of touching them! when we write our scripts in ansible we know that after a few years new eyes can look at them and understand the logic.\nEven though ansible aimed for Devops and IT professionals it is a great tool for every developer to have in their belt. It is very simple to learn, can save a lot of google searching and helps avoiding complex env problems by applying best practices.\nWhy use Ansible   Simple:\nSimpler is better. Ansible is designed so that its tools are simple to use and automation is simple to write and read. Ansible is very easy to read and understand even if you are a new developer that enters the team. There are no special coding skills needed to write and edit it, which help ensure that everyone understands what they do no black magic needed!.\n  Powerful:\nAnsible has roles that can deploy large applications or configure existing infrastructure in a clear way and with very few lines of code, as well as ansible modules which wrap a set of complex commands with clear documentation and configuration.\n  No complex configuration needed:\nAnsible doesn\u0026rsquo;t need to have specific software installed on the hosts it manages, it connects to them (usually with ssh) and manages them from the local machine so there is no agent or special software needed on the managed hosts.\n  Cross platform support:\nAnsible provides agentless support for Linux, Windows, UNIX, network devices, a wide range of cloud providers, and container environments.\n  This as been a very short introduction because from now we will learn and see a lot of examples. If you are still unsure what is ansible and why do you need it I advise you to take at the following guide.\n","permalink":"https://gal-zaidman.github.io/blog/ansible/1.-what-is-ansible-and-why/","tags":["Ansible","FullCourse","GettingStarted"],"title":"Ansible the What and Why"}]